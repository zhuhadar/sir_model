#-- code chunk options
knitr::opts_chunk$set(error=TRUE,     # Keep compiling upon error
collapse=TRUE,  # collapse by default
echo=FALSE,     # do not show code by default
comment = "#>",
out.width="60%",
fig.height = 3.5,
fig.width = 8,
fig.retina=1,
fig.show='hold',
fig.align='center',
cache=FALSE,
message=FALSE,
warning = FALSE,
size="footnotesize"
#,tidy.opts=list(width.cutoff=50), tidy=FALSE
)
library(knitr)
library(tidyverse)
color_text <- function(text, color) {
paste0('<font color="', color,'">', text, '</font>')
}
# https://colorbrewer2.org/#type=qualitative&scheme=Set1&n=4
state_colors = c(S="#377eb8", E="#984ea3", I="#e41a1c", R="#4daf4a")
state_names = tibble(symbol = factor(c("S", "E", "I", "R"), ordered=TRUE),
name = c("Susceptible", "Exposed", "Infectious",
"Recovered"))
nodes = state_names %>% filter(symbol != 'E') %>% mutate(x=row_number(), y=0)
edges = tibble(from=1:2, to=2:3)
gg_SIR = ggplot(nodes) +
geom_point(aes(x,y, fill=symbol), size=20, shape=22) +
scale_x_continuous(expand = c(0,.3)) +
geom_text(aes(x,y,label=symbol), size=10) +
geom_segment(data=edges,
aes(x=from+.2,xend=to-.2), y=0, yend=0,
arrow = arrow(angle=30,length = unit(2, 'mm'), type="closed"),
lineend="butt", linejoin="mitre",
size=2) +
scale_fill_manual(values=state_colors, name="", guide=FALSE) +
theme_void()
gg_SIR +
labs(title='SIR (Susceptible, Infectious, Recovered)') +
theme(plot.title=element_text(hjust = 0.5,size=24,  family="serif"))
SIR <- function(beta, gamma, N=1E5, I=1, S=N-I, R=0, nT = 120,
format=c("wide", "long"),
force=c("linear", "exponential"),   # force of infection form
method=c("deterministic", "stochastic")) {
format = match.arg(format)
force = match.arg(force)
method = match.arg(method)
if(gamma<=0 | gamma>=1) stop("gamma must be between 0 and 1")
if(min(beta)<0) stop("beta must be > 0")
#if(min(beta, gamma)<0 | max(beta, gamma)>1) stop("beta and gamma must be between 0 and 1")
if(length(beta) == 1) beta = rep(beta, nT)
else if(length(beta) != nT) stop("beta must be of length 1 or nT")
#- Initialize vectors
initial = c(S=S, I=I, R=R)
S = I = R = rep(0, nT)
S[1] = initial[1]
I[1] = initial[2]
R[1] = initial[3]
for(t in 2:nT) {
if(force == "linear"){
p.s2i =  beta[t-1] * I[t-1] / N
p.i2r = gamma
} else{    #force == "exponential"
p.s2i = (1-exp(-beta[t-1]*I[t-1]/N))
p.i2r = (1-exp(-gamma))
}
if(method == "deterministic") {
s2i = p.s2i * S[t-1]
i2r = p.i2r * I[t-1]
} else {   # method == "stochastic"
s2i = rbinom(n=1, size=S[t-1], prob=p.s2i)
i2r = rbinom(n=1, size=I[t-1], prob=p.i2r)
}
I[t] = I[t-1] + s2i - i2r
R[t] = R[t-1] + i2r
S[t] = S[t-1] - s2i
}
out = tibble(time=1:nT, S, I, R)
if(format == "long") out = out %>% gather(state, count, -time) %>%
mutate(state = factor(state, levels=c("S", "I", "R")))
return(out)
}
R0 = 3.0
gamma = 1/10
beta = R0*gamma
initial = 1
N= 1E5
SIR(beta=beta, gamma=gamma, N=N, format="long") %>%
ggplot(aes(time, count, color=state, fill=state)) +
geom_line(size=1.05) +
scale_color_manual(values=state_colors, name="", labels=deframe(state_names)) +
labs(x = 'time (in days)', y='count',
title=bquote(SIR:~beta == .(beta) * "," ~ gamma == .(gamma))) +
scale_y_continuous(breaks = seq(0, N, by=20000), labels=scales::comma,
sec.axis = sec_axis(~ . /N, name = "fraction of population",
breaks = seq(0, 1, by=.1) )) +
theme_bw(base_size = 12) +
theme(
plot.title=element_text(hjust=.5),
axis.title.y.right = element_text(margin = unit(c(0, 0, 0, 5), "mm"), angle = -90))
set.seed(2020)
n = 20
data = tibble(x=runif(n), y=runif(n), state=c("I", rep("S", n-1)), id=1:n, time=1)
gamma = .3
eps = .95
for(t in 2:15) {
X = filter(data, time == max(time)) %>% mutate(time=time+1)
X2 = X %>% mutate(time=time+.5)
inf.ind = which(X$state == "I")
if(length(inf.ind)==0) break
for(j in inf.ind) {
inf = filter(X, id == j)
ind.victim = sample(setdiff(1:n, j), size=1)
victim = slice(X, ind.victim)
inf$x = eps*victim$x + (1-eps)*inf$x
inf$y = eps*victim$y + (1-eps)*inf$y
X[j,] = inf
X2[j,] = inf %>% mutate(time=time+.5)
#- Update Infection
state = pull(victim, state)
X2$state[ind.victim] = ifelse(state == "S", "I", state)
#- Update Recovered
if(runif(1) <= gamma) {
X2$state[j] = "R"
X2$x[j] = .2*runif(1) + .8*X2$x[j]
X2$y[j] = .2*runif(1) + .8*X2$y[j]
}
}
data = bind_rows(data, X, X2)
}
library(gganimate)
pp = data %>%
ggplot(aes(x,y, group=time)) + # , group=time
geom_point(size=5, shape=21, aes(fill=state, group=1L)) +
scale_fill_manual(values=state_colors, name="", labels=deframe(state_names))  +
coord_fixed(xlim=0:1, ylim=0:1) +
theme_void() +
theme(
panel.border = element_rect(color="black", fill=NA)
,legend.title = element_blank()
#plot.background = element_rect(fill = "grey90", colour = "black", size = 1),
#legend.position = "top",
#legend.background = element_rect(fill="grey90", size=1.2)
)
anim = pp + transition_time(time)
animate(anim, fps = 6, nframes=200)
nodes = bind_rows(
state_names %>% filter(symbol != 'E') %>% mutate(label = paste0(symbol,"[t]"), x=-1, y=3:1),
state_names %>% filter(symbol != 'E') %>% mutate(label = paste0(symbol,"[t+1]"), x=1, y=3:1)
)
eps = .09
edges = tribble(
~from.x, ~from.y, ~to.x, ~to.y, ~increasing, ~label,
-1, 3, 1, 3, FALSE, '-beta~I[t]/N',
-1, 3-.01, 1, 2+eps, TRUE, 'phantom(x)~beta~I[t]/N',
-1, 2, 1, 2, FALSE, '-gamma',
-1, 2-.01, 1, 1+eps, TRUE, 'phantom(x)~gamma',
-1, 1, 1, 1, TRUE, '1'
)
ggplot(nodes, aes(x,y)) +
geom_point(aes(x,y, fill=symbol), size=20, shape=22) +
scale_y_continuous(expand = c(0,.3)) + scale_x_continuous(expand = c(0,.3)) +
geom_text(aes(x,y,label=label), size=7, parse=TRUE)  +
geom_text(data=edges, aes(x=(from.x+to.x)/2,y=(from.y+to.y)/2,label=label), size=4.5, parse=TRUE,
nudge_y=.1, nudge_x=.15)  +
geom_segment(data=edges,
aes(x=from.x+.2 ,xend=to.x-.2, y=from.y, yend=to.y, color=increasing),
arrow = arrow(angle=30,length = unit(2, 'mm'), type="closed"),
lineend="butt", linejoin="mitre",
size=1.1) +
scale_fill_manual(values=state_colors, name="", guide=FALSE) +
scale_color_manual(values=c("red","black"), name="", guide=FALSE) +
theme_void()
tibble(R0 = seq(1.5, 7, by=.1), p_infec = 1-(1/R0)) %>%
ggplot(aes(R0, p_infec)) + geom_line() +
scale_y_continuous(labels=scales::percent) +
labs(x=expression(R[0]), y="percent infected") +
theme_bw()
peak = tibble(R0 = seq(1.5, 7, by=.1),
p_suscep = 1/R0,
p_infec = 1-(1/R0),
percent_infected = scales::percent(p_infec, accuracy=1))
R0 = 3
gamma = 1/10
beta = R0*gamma # 3/10
N= 1E5
nT = 180
I = bind_rows(
Baseline = SIR(beta=beta, gamma=gamma, N=N, nT=nT, format="wide") ,
`Strategy 1` = SIR(beta=beta-.05, gamma=gamma, N=N, nT=nT, format="wide"),
`Strategy 2` = SIR(beta=beta, gamma=1/8, N=N, nT=nT, format="wide"),
`Strategy 3` = SIR(beta=beta, gamma=gamma, S=N*.90, N=N, nT=nT, format="wide"),
.id = 'strategy'
)
I %>% mutate(cum_I = (I + R)/N, I=I/N) %>%
pivot_longer(c(I, cum_I), names_to="type", values_to="count") %>%
mutate(type = recode(type, cum_I="Cumulative Percent Infected", I = "Percent Infectious")) %>%
ggplot(aes(time, count, color=strategy)) + geom_line() +
facet_wrap(~fct_rev(type), scales="free_y") +
scale_y_continuous(labels=scales::percent) +
labs(color="", x = "time since first infection (in days)") +
theme_bw() +
theme(
axis.title.y = element_blank(),
strip.background = element_rect(fill="#E57200"),
strip.text = element_text(face="bold", family="mono")
)
chg.pts = tribble(
~strategy, ~chg.pt,
'Baseline',  NA,
't=40',  40,
't=50', 50,
't=65', 65)
beta2 = .2
I = bind_rows(
Baseline = SIR(beta=beta, gamma=gamma, N=N, nT=nT, format="wide") ,
`t=40` = SIR(beta=c(rep(beta, 40), rep(beta2, nT-40)), gamma=gamma, N=N, nT=nT, format="wide"),
`t=50` = SIR(beta=c(rep(beta, 50), rep(beta2, nT-50)), gamma=gamma, N=N, nT=nT, format="wide"),
`t=65` = SIR(beta=c(rep(beta, 65), rep(beta2, nT-65)), gamma=gamma, N=N, nT=nT, format="wide"),
.id = 'strategy'
)
I %>%
ggplot(aes(time, I/N)) +
geom_area(aes(fill=strategy), alpha=.6) + facet_wrap(~strategy) +
geom_line(data=. %>% filter(strategy=="Baseline") %>% select(-strategy), color="black",
size=1) +
geom_vline(data=chg.pts, aes(xintercept=chg.pt), linetype=2, size=.5) +
scale_y_continuous(labels=scales::percent) +
labs(fill="", x = "time since first infection (in days)") +
theme_bw() +
theme(
axis.title.y = element_blank(),
strip.background = element_rect(fill="#E57200"),
strip.text = element_text(face="bold", family="mono")
)
## Stochastic SIR
a = SIR(beta=beta, gamma=gamma, N=N, nT=nT, format="wide")
set.seed(2020)
b = a %>% select(time)
for(m in 1:100) {
sir = SIR(beta=beta, gamma=gamma, N=N, nT=nT, format="wide", method="stochastic")$I
if(sir[60] < 1 ) next
b = b %>% mutate(!!as.character(m) := sir)
}
c = b %>%
pivot_longer(-time, names_to="id", values_to="I")
d = c %>%
group_by(time) %>%
summarize(L = quantile(I, probs=.025), U = quantile(I, probs=.975), median=median(I),
mean = mean(I))
c %>%
ggplot(aes(time, I)) +
geom_line(aes(group=id), alpha=.5, color="grey70") +
geom_line(data=a, size=1.10) +
labs(y="number infectious", x = "time since first infection (in days)") +
theme_bw()
c %>% group_by(id) %>% filter(I == max(I)) %>% ungroup %>% summarize(min = min(time), max=max(time), mean=mean(time), mean(I))
#     min   max  mean
#   <int> <int> <dbl>
# 1    58    93  68.1
nodes = state_names %>% mutate(x=row_number(), y=0)
edges = tibble(from=1:(nrow(nodes)-1), to=2:nrow(nodes))
gg_SEIR = ggplot(nodes) +
geom_point(aes(x,y, fill=symbol), size=20, shape=22) +
scale_x_continuous(expand = c(0,.3)) +
geom_text(aes(x,y,label=symbol), size=10) +
geom_segment(data=edges,
aes(x=from+.2,xend=to-.2), y=0, yend=0,
arrow = arrow(angle=30,length = unit(2, 'mm'), type="closed"),
lineend="butt", linejoin="mitre",
size=2) +
scale_fill_manual(values=state_colors, name="", guide=FALSE) +
theme_void()
gg_SEIR +
labs(title='SEIR (Susceptible, Exposed, Infectious, Recovered)') +
theme(plot.title=element_text(hjust = 0.5, size=20,  family="serif"))
